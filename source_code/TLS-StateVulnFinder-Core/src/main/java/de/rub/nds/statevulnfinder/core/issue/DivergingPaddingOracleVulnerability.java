/*
 * TLS-StateBulnFinder - A state machine analysis tool based on TLS-Attacker
 *
 * Copyright 2020-2023 Ruhr University Bochum and Paderborn University
 *
 * Licensed under Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package de.rub.nds.statevulnfinder.core.issue;

import de.rub.nds.statevulnfinder.core.algorithm.words.TlsWord;
import de.rub.nds.statevulnfinder.core.constants.StateMachineIssueType;
import java.util.List;

/**
 * @author robert
 */
public class DivergingPaddingOracleVulnerability extends BBAndPOVulnerability
        implements StateDivergenceIssue {

    private final Object sourceNode;
    private final Object firstTargetNode;
    private final Object secondTargetNode;
    private final TlsWord firstWord;
    private final TlsWord secondWord;
    private final List<TlsWord> accessSequence;

    public DivergingPaddingOracleVulnerability(
            Object sourceNode,
            Object firstTargetNode,
            Object secondTargetNode,
            String reason,
            TlsWord firstWord,
            TlsWord secondWord,
            List<TlsWord> accessSequence) {
        super(StateMachineIssueType.PADDING_ORACLE, reason);
        this.sourceNode = sourceNode;
        this.firstTargetNode = firstTargetNode;
        this.secondTargetNode = secondTargetNode;
        this.firstWord = firstWord;
        this.secondWord = secondWord;
        this.accessSequence = accessSequence;
    }

    @Override
    public String toString() {
        return "DivergingPaddingOracleVulnerability{"
                + "sourceNode="
                + sourceNode
                + ", firstTargetNode="
                + firstTargetNode
                + ", secondTargetNode="
                + secondTargetNode
                + ", firstWord="
                + firstWord
                + ", secondWord="
                + secondWord
                + '}';
    }

    @Override
    public List<TlsWord> getPath() {
        return accessSequence;
    }

    @Override
    public TlsWord getFirstWord() {
        return firstWord;
    }

    @Override
    public TlsWord getSecondWord() {
        return secondWord;
    }

    @Override
    public Object getSourceNode() {
        return sourceNode;
    }
}
