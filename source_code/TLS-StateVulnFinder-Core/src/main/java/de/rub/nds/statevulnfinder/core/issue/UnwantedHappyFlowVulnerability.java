/*
 * TLS-StateBulnFinder - A state machine analysis tool based on TLS-Attacker
 *
 * Copyright 2020-2023 Ruhr University Bochum and Paderborn University
 *
 * Licensed under Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.txt
 */
package de.rub.nds.statevulnfinder.core.issue;

import de.rub.nds.statevulnfinder.core.algorithm.words.TlsWord;
import de.rub.nds.statevulnfinder.core.constants.StateMachineIssueType;
import java.util.List;

public class UnwantedHappyFlowVulnerability extends StateMachineIssue {

    private final List<TlsWord> unwantedHappyflow;
    private final boolean verifiable;

    public UnwantedHappyFlowVulnerability(List<TlsWord> unwantedHappyFlow) {
        super(
                StateMachineIssueType.UNWANTED_HAPPY_FLOW,
                "Found messages that lead to an invalid happy flow");
        this.unwantedHappyflow = unwantedHappyFlow;
        this.verifiable = true;
    }

    public UnwantedHappyFlowVulnerability(List<TlsWord> unwantedHappyFlow, boolean verifiable) {
        super(
                StateMachineIssueType.UNWANTED_HAPPY_FLOW,
                "Found messages that lead to an assumed invalid happy flow");
        this.unwantedHappyflow = unwantedHappyFlow;
        this.verifiable = verifiable;
    }

    @Override
    public String toString() {
        if (verifiable) {
            return "There is an unwanted/invalid accepting message flow in the TlsStateMachine. Sent messages that lead to the accepting state: "
                    + getPath();
        } else {
            return "There is an assumed unwanted/invalid accepting message flow in the TlsStateMachine. Sent messages that lead to a benign state: "
                    + getPath();
        }
    }

    @Override
    public List<TlsWord> getPath() {
        return this.unwantedHappyflow;
    }
}
