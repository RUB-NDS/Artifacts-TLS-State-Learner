# Build stage for Maven project
FROM maven:3.8.6-openjdk-11-slim AS maven-builder

WORKDIR /build
COPY source_code/ /build/

# Build the project
RUN mvn clean package -Dspotless.apply.skip

# We bake generic RSA certs into the image, allowing us to test for Bleichenbacher Oracles
FROM alpine:3.12 AS cert-generator
RUN apk add --no-cache openssl
WORKDIR /certs
RUN openssl req -x509 -newkey rsa:2048 -keyout server.key -out server.crt -days 365 -nodes \
    -subj "/C=US/ST=State/L=City/O=TLS-Attacker/CN=localhost"

FROM alpine:3.12 AS openssl-base1
RUN apk update &&\
  apk add git \
    alpine-sdk \
    libtool \
    zlib-dev \
    linux-headers \
    cmake \
    unzip \
    wget \
    bash \
    coreutils \
    tar \
    build-base \
    perl

WORKDIR /src
RUN wget -O openssl.tar.gz https://www.openssl.org/source/old/1.0.1/openssl-1.0.1j.tar.gz
RUN mkdir openssl
RUN tar -xzf openssl.tar.gz -C openssl --strip-components 1
WORKDIR /src/openssl
COPY dockerfiles/openssl-004-musl-termios.patch ./
RUN patch crypto/ui/ui_openssl.c < openssl-004-musl-termios.patch

RUN ./config --prefix=/build/ --openssldir=/build/ no-async 
RUN make -s && make install_sw -s
# copy all libs we need
RUN mkdir /libdeps
RUN cp $(LD_LIBRARY_PATH="/build/lib/" ldd /build/bin/openssl | awk '$3=="" {print $1}; $3!="" {print $3}') /libdeps/

FROM alpine:3.12 AS openssl-base2

# Install Java 11, tmux, and graphviz
RUN apk update && apk add --no-cache openjdk11-jre bash tmux graphviz

# Copy OpenSSL from build stage
COPY --from=openssl-base1 /build/ /usr/local/openssl/
COPY --from=openssl-base1 /libdeps/* /lib/
COPY --from=openssl-base1 /build/bin/openssl /usr/local/openssl/bin/

# Set up environment
ENV PATH="/usr/local/openssl/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/openssl/lib:${LD_LIBRARY_PATH:-}"

# Create working directory
WORKDIR /app

# Copy the apps folder from the Maven build stage
COPY --from=maven-builder /build/apps/ /app/apps/

# Copy certificates from cert-generator stage
COPY --from=cert-generator /certs/server.key /app/server.key
COPY --from=cert-generator /certs/server.crt /app/server.crt

# Copy the entrypoint script
COPY dockerfiles/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Expose port we use for OpenSSL just in case
EXPOSE 4433

# Set the entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
