# Build stage for Maven project
FROM maven:3.8.6-openjdk-11-slim AS maven-builder

WORKDIR /build
COPY source_code/ /build/

# Build the project
RUN mvn clean package -Dspotless.apply.skip

# We bake generic RSA certs into the image, allowing us to test for Bleichenbacher Oracles
FROM alpine:3.19 AS cert-generator
RUN apk add --no-cache openssl
WORKDIR /certs
RUN openssl req -x509 -newkey rsa:2048 -keyout server.key -out server.crt -days 365 -nodes \
    -subj "/C=US/ST=State/L=City/O=TLS-Attacker/CN=localhost"

# Build OpenSSL 3.4
FROM alpine:3.19 AS openssl-builder
RUN apk update && \
    apk add --no-cache \
        build-base \
        perl \
        linux-headers \
        zlib-dev \
        wget

WORKDIR /src
RUN wget https://github.com/openssl/openssl/releases/download/openssl-3.4.0/openssl-3.4.0.tar.gz
RUN tar -xzf openssl-3.4.0.tar.gz
WORKDIR /src/openssl-3.4.0

RUN ./Configure linux-x86_64 --prefix=/usr/local/openssl --openssldir=/usr/local/openssl no-async
RUN make -j$(nproc)
RUN make install_sw

# Collect runtime dependencies
RUN mkdir /libdeps
RUN cp $(ldd /usr/local/openssl/bin/openssl | awk '$3=="" {print $1}; $3!="" {print $3}' | grep -v '^/usr/local/openssl') /libdeps/ || true

# Prepare execution
FROM alpine:3.19

# Install Java 11, tmux, and graphviz
RUN apk update && apk add --no-cache openjdk11-jre bash tmux graphviz

# Copy OpenSSL from builder
COPY --from=openssl-builder /usr/local/openssl /usr/local/openssl
COPY --from=openssl-builder /libdeps/* /lib/

# Set up environment
ENV PATH="/usr/local/openssl/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/openssl/lib64:/usr/local/openssl/lib"

# Create working directory
WORKDIR /app

# Copy the apps folder from the Maven build stage
COPY --from=maven-builder /build/apps/ /app/apps/

# Copy certificates from cert-generator stage
COPY --from=cert-generator /certs/server.key /app/server.key
COPY --from=cert-generator /certs/server.crt /app/server.crt

# Copy the entrypoint script
# Note that the state learner's query parameter is set to 20k instead of 42k to reduce the execution time. According to our tests, this is sufficient for OpenSSL.
COPY dockerfiles/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Expose port we use for OpenSSL just in case
EXPOSE 4433

# Set the entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
